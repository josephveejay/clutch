// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aws/ecs/v1/ecs.proto

package ecsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetEcsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetEcsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Region

	return nil
}

// GetEcsRequestValidationError is the validation error returned by
// GetEcsRequest.Validate if the designated constraints aren't met.
type GetEcsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEcsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEcsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEcsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEcsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEcsRequestValidationError) ErrorName() string { return "GetEcsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEcsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEcsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEcsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEcsRequestValidationError{}

// Validate checks the field values on GetEcsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetEcsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetEcsResponseValidationError is the validation error returned by
// GetEcsResponse.Validate if the designated constraints aren't met.
type GetEcsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEcsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEcsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEcsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEcsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEcsResponseValidationError) ErrorName() string { return "GetEcsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetEcsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEcsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEcsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEcsResponseValidationError{}

// Validate checks the field values on GetEcsSrvRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetEcsSrvRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetEcsCluster()) < 1 {
		return GetEcsSrvRequestValidationError{
			field:  "EcsCluster",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetRegion()) < 1 {
		return GetEcsSrvRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// GetEcsSrvRequestValidationError is the validation error returned by
// GetEcsSrvRequest.Validate if the designated constraints aren't met.
type GetEcsSrvRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEcsSrvRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEcsSrvRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEcsSrvRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEcsSrvRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEcsSrvRequestValidationError) ErrorName() string { return "GetEcsSrvRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEcsSrvRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEcsSrvRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEcsSrvRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEcsSrvRequestValidationError{}

// Validate checks the field values on GetEcsSrvResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetEcsSrvResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetEcsSrvResponseValidationError is the validation error returned by
// GetEcsSrvResponse.Validate if the designated constraints aren't met.
type GetEcsSrvResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEcsSrvResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEcsSrvResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEcsSrvResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEcsSrvResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEcsSrvResponseValidationError) ErrorName() string {
	return "GetEcsSrvResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEcsSrvResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEcsSrvResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEcsSrvResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEcsSrvResponseValidationError{}

// Validate checks the field values on GetEcsSrvTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEcsSrvTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetEcsClusterservice()) < 1 {
		return GetEcsSrvTaskRequestValidationError{
			field:  "EcsClusterservice",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetEcsCluster()) < 1 {
		return GetEcsSrvTaskRequestValidationError{
			field:  "EcsCluster",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetRegion()) < 1 {
		return GetEcsSrvTaskRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// GetEcsSrvTaskRequestValidationError is the validation error returned by
// GetEcsSrvTaskRequest.Validate if the designated constraints aren't met.
type GetEcsSrvTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEcsSrvTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEcsSrvTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEcsSrvTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEcsSrvTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEcsSrvTaskRequestValidationError) ErrorName() string {
	return "GetEcsSrvTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEcsSrvTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEcsSrvTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEcsSrvTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEcsSrvTaskRequestValidationError{}

// Validate checks the field values on GetEcsSrvTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEcsSrvTaskResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Env

	return nil
}

// GetEcsSrvTaskResponseValidationError is the validation error returned by
// GetEcsSrvTaskResponse.Validate if the designated constraints aren't met.
type GetEcsSrvTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEcsSrvTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEcsSrvTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEcsSrvTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEcsSrvTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEcsSrvTaskResponseValidationError) ErrorName() string {
	return "GetEcsSrvTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEcsSrvTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEcsSrvTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEcsSrvTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEcsSrvTaskResponseValidationError{}
