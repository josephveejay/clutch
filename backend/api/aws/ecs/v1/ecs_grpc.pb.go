// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ecsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EcsAPIClient is the client API for EcsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EcsAPIClient interface {
	GetECSClusters(ctx context.Context, in *GetEcsRequest, opts ...grpc.CallOption) (*GetEcsResponse, error)
	GetECSClusterServices(ctx context.Context, in *GetEcsSrvRequest, opts ...grpc.CallOption) (*GetEcsSrvResponse, error)
	GetECSClusterSrvTaskDef(ctx context.Context, in *GetEcsSrvTaskRequest, opts ...grpc.CallOption) (*GetEcsSrvTaskResponse, error)
}

type ecsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEcsAPIClient(cc grpc.ClientConnInterface) EcsAPIClient {
	return &ecsAPIClient{cc}
}

func (c *ecsAPIClient) GetECSClusters(ctx context.Context, in *GetEcsRequest, opts ...grpc.CallOption) (*GetEcsResponse, error) {
	out := new(GetEcsResponse)
	err := c.cc.Invoke(ctx, "/clutch.aws.ecs.v1.EcsAPI/GetECSClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecsAPIClient) GetECSClusterServices(ctx context.Context, in *GetEcsSrvRequest, opts ...grpc.CallOption) (*GetEcsSrvResponse, error) {
	out := new(GetEcsSrvResponse)
	err := c.cc.Invoke(ctx, "/clutch.aws.ecs.v1.EcsAPI/GetECSClusterServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecsAPIClient) GetECSClusterSrvTaskDef(ctx context.Context, in *GetEcsSrvTaskRequest, opts ...grpc.CallOption) (*GetEcsSrvTaskResponse, error) {
	out := new(GetEcsSrvTaskResponse)
	err := c.cc.Invoke(ctx, "/clutch.aws.ecs.v1.EcsAPI/GetECSClusterSrvTaskDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EcsAPIServer is the server API for EcsAPI service.
// All implementations should embed UnimplementedEcsAPIServer
// for forward compatibility
type EcsAPIServer interface {
	GetECSClusters(context.Context, *GetEcsRequest) (*GetEcsResponse, error)
	GetECSClusterServices(context.Context, *GetEcsSrvRequest) (*GetEcsSrvResponse, error)
	GetECSClusterSrvTaskDef(context.Context, *GetEcsSrvTaskRequest) (*GetEcsSrvTaskResponse, error)
}

// UnimplementedEcsAPIServer should be embedded to have forward compatible implementations.
type UnimplementedEcsAPIServer struct {
}

func (UnimplementedEcsAPIServer) GetECSClusters(context.Context, *GetEcsRequest) (*GetEcsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetECSClusters not implemented")
}
func (UnimplementedEcsAPIServer) GetECSClusterServices(context.Context, *GetEcsSrvRequest) (*GetEcsSrvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetECSClusterServices not implemented")
}
func (UnimplementedEcsAPIServer) GetECSClusterSrvTaskDef(context.Context, *GetEcsSrvTaskRequest) (*GetEcsSrvTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetECSClusterSrvTaskDef not implemented")
}

// UnsafeEcsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EcsAPIServer will
// result in compilation errors.
type UnsafeEcsAPIServer interface {
	mustEmbedUnimplementedEcsAPIServer()
}

func RegisterEcsAPIServer(s grpc.ServiceRegistrar, srv EcsAPIServer) {
	s.RegisterService(&EcsAPI_ServiceDesc, srv)
}

func _EcsAPI_GetECSClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcsAPIServer).GetECSClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clutch.aws.ecs.v1.EcsAPI/GetECSClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcsAPIServer).GetECSClusters(ctx, req.(*GetEcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcsAPI_GetECSClusterServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEcsSrvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcsAPIServer).GetECSClusterServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clutch.aws.ecs.v1.EcsAPI/GetECSClusterServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcsAPIServer).GetECSClusterServices(ctx, req.(*GetEcsSrvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcsAPI_GetECSClusterSrvTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEcsSrvTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcsAPIServer).GetECSClusterSrvTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clutch.aws.ecs.v1.EcsAPI/GetECSClusterSrvTaskDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcsAPIServer).GetECSClusterSrvTaskDef(ctx, req.(*GetEcsSrvTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EcsAPI_ServiceDesc is the grpc.ServiceDesc for EcsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EcsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clutch.aws.ecs.v1.EcsAPI",
	HandlerType: (*EcsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetECSClusters",
			Handler:    _EcsAPI_GetECSClusters_Handler,
		},
		{
			MethodName: "GetECSClusterServices",
			Handler:    _EcsAPI_GetECSClusterServices_Handler,
		},
		{
			MethodName: "GetECSClusterSrvTaskDef",
			Handler:    _EcsAPI_GetECSClusterSrvTaskDef_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aws/ecs/v1/ecs.proto",
}
